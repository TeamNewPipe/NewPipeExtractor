package org.schabi.newpipe.extractor.streamdata.stream.simpleimpl;

import org.schabi.newpipe.extractor.streamdata.delivery.DeliveryData;
import org.schabi.newpipe.extractor.streamdata.format.SubtitleMediaFormat;
import org.schabi.newpipe.extractor.streamdata.stream.SubtitleStream;

import java.util.Locale;
import java.util.Objects;

import javax.annotation.Nonnull;

public class SimpleSubtitleStreamImpl extends AbstractStreamImpl implements SubtitleStream {
    @Nonnull
    private final SubtitleMediaFormat subtitleMediaFormat;
    private final boolean autogenerated;
    @Nonnull
    private final String languageCode;
    private final Locale locale;

    public SimpleSubtitleStreamImpl(
            @Nonnull final DeliveryData deliveryData,
            final SubtitleMediaFormat subtitleMediaFormat,
            final boolean autogenerated,
            @Nonnull final String languageCode
    ) {
        super(deliveryData);
        this.subtitleMediaFormat = Objects.requireNonNull(subtitleMediaFormat);
        this.autogenerated = autogenerated;
        this.languageCode = Objects.requireNonNull(languageCode);
        /*
         * Locale.forLanguageTag only for Android API >= 21
         * Locale.Builder only for Android API >= 21
         * Country codes doesn't work well without
         */
        final String[] splits = languageCode.split("-");
        switch (splits.length) {
            case 2:
                this.locale = new Locale(splits[0], splits[1]);
                break;
            case 3:
                // Complex variants don't work!
                this.locale = new Locale(splits[0], splits[1], splits[2]);
                break;
            default:
                this.locale = new Locale(splits[0]);
                break;
        }
    }

    @Nonnull
    @Override
    public SubtitleMediaFormat subtitleMediaFormat() {
        return subtitleMediaFormat;
    }

    @Override
    public boolean autoGenerated() {
        return autogenerated;
    }

    @Nonnull
    @Override
    public String languageCode() {
        return languageCode;
    }

    @Override
    public Locale locale() {
        return locale;
    }
}
